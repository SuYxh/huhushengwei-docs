import{o as e,c as l,b as i}from"./app.157864df.js";const t='{"title":"39-使用vue渲染大量数据时应该怎么优化？说下你的思路！","description":"","frontmatter":{},"headers":[{"level":2,"title":"39-使用vue渲染大量数据时应该怎么优化？说下你的思路！","slug":"_39-使用vue渲染大量数据时应该怎么优化？说下你的思路！"},{"level":3,"title":"分析","slug":"分析"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"回答","slug":"回答"}],"relativePath":"frame/vue/39-使用vue渲染大量数据时应该怎么优化？说下你的思路.md","lastUpdated":1662433250873}',r={},o=[i('<h2 id="_39-使用vue渲染大量数据时应该怎么优化？说下你的思路！">39-使用vue渲染大量数据时应该怎么优化？说下你的思路！</h2><h3 id="分析">分析</h3><p>企业级项目中渲染大量数据的情况比较常见，因此这是一道非常好的综合实践题目。</p><h3 id="思路">思路</h3><ol><li>描述大数据量带来的问题</li><li>分不同情况做不同处理</li><li>总结一下</li></ol><h3 id="回答">回答</h3><ol><li>在大型企业级项目中经常需要渲染大量数据，此时很容易出现卡顿的情况。比如大数据量的表格、树。</li><li>处理时要根据情况做不通处理： <ul><li>可以采取分页的方式获取，避免渲染大量数据</li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAkryum%2Fvue-virtual-scroller" target="_blank" rel="noopener noreferrer">vue-virtual-scroller</a>等虚拟滚动方案，只渲染视口范围内的数据</li><li>如果不需要更新，可以使用<code>v-once</code>方式只渲染一次</li><li>通过<a href="https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fapi%2Fbuilt-in-directives.html%23v-memo" target="_blank" rel="noopener noreferrer">v-memo</a>可以缓存结果，结合<code>v-for</code>使用，避免数据变化时不必要的VNode创建</li><li>可以采用懒加载方式，在用户需要的时候再加载数据，比如tree组件子树的懒加载</li></ul></li><li>总之，还是要看具体需求，首先从设计上避免大数据获取和渲染；实在需要这样做可以采用虚表的方式优化渲染；最后优化更新，如果不需要更新可以v-once处理，需要更新可以v-memo进一步优化大数据更新性能。其他可以采用的是交互方式优化，无线滚动、懒加载等方案。</li></ol>',7)];r.render=function(i,t,r,u,a,n){return e(),l("div",null,o)};export default r;export{t as __pageData};

import{o as n,c as a,b as s}from"./app.157864df.js";const t='{"title":"30-watch和watchEffect异同","description":"","frontmatter":{},"headers":[{"level":2,"title":"30-watch和watchEffect异同","slug":"_30-watch和watcheffect异同"},{"level":3,"title":"体验","slug":"体验"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"范例","slug":"范例"},{"level":3,"title":"知其所以然","slug":"知其所以然"},{"level":2,"title":"","slug":""}],"relativePath":"frame/vue/30-watch和watchEffect异同.md","lastUpdated":1662083353135}',e={},o=[s('<h2 id="_30-watch和watcheffect异同">30-watch和watchEffect异同</h2><p>我们经常性需要侦测响应式数据的变化，vue3中除了watch之外又出现了watchEffect，不少同学会混淆这两个api。</p><h3 id="体验">体验</h3><p><code>watchEffect</code>立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数。</p><blockquote><p>Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed.</p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// -&gt; logs 0</span>\n\ncount<span class="token punctuation">.</span>value<span class="token operator">++</span>\n<span class="token comment">// -&gt; logs 1</span>\n</code></pre></div><p><code>watch</code>侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。</p><blockquote><p>Watches one or more reactive data sources and invokes a callback function when the sources change.</p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h3 id="思路">思路</h3><ol><li>给出两者定义</li><li>给出场景上的不同</li><li>给出使用方式和细节</li><li>原理阐述</li></ol><h3 id="范例">范例</h3><ol><li><p><code>watchEffect</code>立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数。<code>watch</code>侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。</p></li><li><p><code>watchEffect(effect)</code>是一种特殊<code>watch</code>，传入的函数既是依赖收集的数据源，也是回调函数。如果我们不关心响应式数据变化前后的值，只是想拿这些数据做些事情，那么<code>watchEffect</code>就是我们需要的。watch更底层，可以接收多种数据源，包括用于依赖收集的getter函数，因此它完全可以实现watchEffect的功能，同时由于可以指定getter函数，依赖可以控制的更精确，还能获取数据变化前后的值，因此如果需要这些时我们会使用watch。</p></li><li><p><code>watchEffect</code>在使用时，传入的函数会立刻执行一次。<code>watch</code>默认情况下并不会执行回调函数，除非我们手动设置<code>immediate</code>选项。</p></li><li><p>从实现上来说，<code>watchEffect(fn)</code>相当于<code>watch(fn,fn,{immediate:true})</code></p></li></ol><h3 id="知其所以然">知其所以然</h3><p><code>watchEffect</code>定义：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fvuejs%2Fcore%2Fblob%2FHEAD%2Fpackages%2Fruntime-core%2Fsrc%2FapiWatch.ts%23L80-L81" target="_blank" rel="noopener noreferrer">github1s.com/vuejs/core/…</a></p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span>\n  effect<span class="token operator">:</span> WatchEffect<span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> WatchOptionsBase\n<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><hr><p><code>watch</code>定义如下：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fvuejs%2Fcore%2Fblob%2FHEAD%2Fpackages%2Fruntime-core%2Fsrc%2FapiWatch.ts%23L158-L159" target="_blank" rel="noopener noreferrer">github1s.com/vuejs/core/…</a></p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">watch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> Immediate <span class="token keyword">extends</span> Readonly<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  source<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  cb<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token operator">&lt;</span>Immediate<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>source <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>很明显<code>watchEffect</code>就是一种特殊的<code>watch</code>实现。</p><h2 id=""></h2>',21)];e.render=function(s,t,e,p,c,l){return n(),a("div",null,o)};export default e;export{t as __pageData};

import{o as e,c as t,b as l}from"./app.157864df.js";const i='{"title":"31-SPA、SSR的区别是什么","description":"","frontmatter":{},"headers":[{"level":2,"title":"31-SPA、SSR的区别是什么","slug":"_31-spa、ssr的区别是什么"},{"level":3,"title":"思路分析","slug":"思路分析"},{"level":3,"title":"回答范例","slug":"回答范例"},{"level":3,"title":"知其所以然","slug":"知其所以然"}],"relativePath":"frame/vue/31-SPA、SSR的区别是什么.md","lastUpdated":1662083353135}',r={},S=[l('<h2 id="_31-spa、ssr的区别是什么">31-SPA、SSR的区别是什么</h2><p>我们现在编写的Vue、React和Angular应用大多数情况下都会在一个页面中，点击链接跳转页面通常是内容切换而非页面跳转，由于良好的用户体验逐渐成为主流的开发模式。但同时也会有首屏加载时间长，SEO不友好的问题，因此有了SSR，这也是为什么面试中会问到两者的区别。</p><h3 id="思路分析">思路分析</h3><ol><li>两者概念</li><li>两者优缺点分析</li><li>使用场景差异</li><li>其他选择</li></ol><h3 id="回答范例">回答范例</h3><ol><li>SPA（Single Page Application）即<strong>单页面应用</strong>。一般也称为 <strong>客户端渲染</strong>（Client Side Render）， 简称 CSR。SSR（Server Side Render）即 <strong>服务端渲染</strong>。一般也称为 <strong>多页面应用</strong>（Mulpile Page Application），简称 MPA。</li><li>SPA应用只会首次请求html文件，后续只需要请求JSON数据即可，因此用户体验更好，节约流量，服务端压力也较小。但是首屏加载的时间会变长，而且SEO不友好。为了解决以上缺点，就有了SSR方案，由于HTML内容在服务器一次性生成出来，首屏加载快，搜索引擎也可以很方便的抓取页面信息。但同时SSR方案也会有性能，开发受限等问题。</li><li>在选择上，如果我们的应用存在首屏加载优化需求，SEO需求时，就可以考虑SSR。</li><li>但并不是只有这一种替代方案，比如对一些不常变化的静态网站，SSR反而浪费资源，我们可以考虑<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fchrisvfritz%2Fprerender-spa-plugin" target="_blank" rel="noopener noreferrer">预渲染</a>（prerender）方案。另外nuxt.js/next.js中给我们提供了SSG（Static Site Generate）静态网站生成方案也是很好的静态站点解决方案，结合一些CI手段，可以起到很好的优化效果，且能节约服务器资源。</li></ol><h3 id="知其所以然">知其所以然</h3><p>内容生成上的区别：</p><p>SSR：一次请求直接返回HTML结果</p><p><img src="https://qn.huat.xyz/mac/20220829001519.awebp" alt="ssr"></p><p>SPA：现请求HTML结构，再请求数据，渲染内容</p><p><img src="https://qn.huat.xyz/mac/20220829001522.awebp" alt="spa"></p><p>部署上的区别</p><p><img src="https://qn.huat.xyz/mac/20220829001525.awebp" alt="部署上的区别"></p>',14)];r.render=function(l,i,r,p,a,s){return e(),t("div",null,S)};export default r;export{i as __pageData};

import{o as n,c as a,b as s}from"./app.157864df.js";const t='{"title":"你了解哪些Vue性能优化方法？","description":"","frontmatter":{},"headers":[{"level":2,"title":"你了解哪些Vue性能优化方法？","slug":"你了解哪些vue性能优化方法？"},{"level":3,"title":"分析","slug":"分析"},{"level":3,"title":"答题思路：","slug":"答题思路："},{"level":3,"title":"回答范例","slug":"回答范例"}],"relativePath":"frame/vue/25-你了解哪些Vue性能优化方法.md","lastUpdated":1662083353135}',p={},e=[s('<h2 id="你了解哪些vue性能优化方法？">你了解哪些Vue性能优化方法？</h2><h3 id="分析">分析</h3><p>这是一道综合实践题目，写过一定数量的代码之后小伙伴们自然会开始关注一些优化方法，答得越多肯定实践经验也越丰富，是很好的题目。</p><h3 id="答题思路：">答题思路：</h3><p>根据题目描述，这里主要探讨Vue代码层面的优化</p><h3 id="回答范例">回答范例</h3><ul><li><p>我这里主要从Vue代码编写层面说一些优化手段，例如：代码分割、服务端渲染、组件缓存、长列表优化等</p></li><li><p>最常见的路由懒加载：有效拆分App尺寸，访问时才异步加载</p><div class="language-css"><pre><code><span class="token selector">const router = createRouter(</span><span class="token punctuation">{</span>\n  <span class="token selector">routes: [\n    // 借助webpack的import()实现异步组件</span>\n    <span class="token punctuation">{</span> <span class="token property">path</span><span class="token punctuation">:</span> <span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span> <span class="token property">component</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> =&gt; <span class="token function">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Foo.vue&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n  ]\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p><code>keep-alive</code>缓存页面：避免重复创建组件实例，且能保留缓存组件状态</p><div class="language-ruby"><pre><code><span class="token operator">&lt;</span>router<span class="token operator">-</span>view v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">&quot;{ Component }&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>component <span class="token symbol">:is</span><span class="token operator">=</span><span class="token string">&quot;Component&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span>\n</code></pre></div></li><li><p>使用<code>v-show</code>复用DOM：避免重复创建组件</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cell<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 这种情况用v-show复用DOM，比v-if效果好 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Heavy</span> <span class="token attr-name">:n</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Heavy</span> <span class="token attr-name">:n</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p><code>v-for</code> 遍历避免同时使用 <code>v-if</code>：实际上在Vue3中已经是个错误写法</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>\n        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in activeUsers<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">&lt;!--</span> <span class="token attr-name">避免同时使用，vue3中会报错</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- v-if=&quot;user.isActive&quot; --&gt;</span>\n        :key=&quot;user.id&quot;&gt;\n        {{ user.name }}\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>\n  export default {\n    computed: {\n      activeUsers: function () {\n        return this.users.filter(user =&gt; user.isActive)\n      }\n    }\n  }\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>v-once和v-memo：不再变化的数据使用<code>v-once</code></p><div class="language-xml"><pre><code><span class="token comment">&lt;!-- single element --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>This will never change: {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- the element have children --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>comment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- component --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-once</span> <span class="token attr-name">:comment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- `v-for` directive --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>按条件跳过更新时使用<code>v-momo</code>：下面这个列表只会更新选中状态变化项</p><div class="language-css"><pre><code><span class="token selector">&lt;div v-for=&quot;item in list&quot; :key=&quot;item.id&quot; v-memo=&quot;[item.id === selected]&quot;&gt;\n  &lt;p&gt;ID:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> item.id <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token selector">- selected:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> item.id === selected <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/p&gt;\n  &lt;p&gt;...more child nodes&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></div><blockquote><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fapi%2Fbuilt-in-directives.html%23v-memo" target="_blank" rel="noopener noreferrer">vuejs.org/api/built-i…</a></p></blockquote></li><li><p>长列表性能优化：如果是大数据长列表，可采用虚拟滚动，只渲染少部分区域的内容</p><div class="language-ini"><pre><code>&lt;recycle-scroller\n  <span class="token key attr-name">class</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">items</span>&quot;</span>\n  <span class="token key attr-name">:items</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">items</span>&quot;</span>\n  <span class="token key attr-name">:item-size</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">24</span>&quot;</span>\n&gt;\n  <span class="token key attr-name">&lt;template v-slot</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;{ item }&quot;&gt;</span>\n    &lt;FetchItemView\n      <span class="token key attr-name">:item</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">item</span>&quot;</span>\n      <span class="token key attr-name">@vote</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">voteItem(item)</span>&quot;</span>\n    /&gt;\n  &lt;/template&gt;\n&lt;/recycle-scroller&gt;\n</code></pre></div><blockquote><p>一些开源库：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FAkryum%2Fvue-virtual-scroller" target="_blank" rel="noopener noreferrer">vue-virtual-scroller</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Frocwang%2Fvue-virtual-scroll-grid" target="_blank" rel="noopener noreferrer">vue-virtual-scroll-grid</a></li></ul></blockquote></li><li><p>事件的销毁：Vue 组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>refresh<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>图片懒加载</p><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。</p><div class="language-ini"><pre><code><span class="token key attr-name">&lt;img v-lazy</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;/static/img/1.png&quot;&gt;</span>\n</code></pre></div><blockquote><p>参考项目：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fhilongjw%2Fvue-lazyload" target="_blank" rel="noopener noreferrer">vue-lazyload</a></p></blockquote></li><li><p>第三方插件按需引入</p><p>像<code>element-plus</code>这样的第三方组件库可以按需引入避免体积太大。</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">,</span> Select <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>子组件分割策略：较重的状态组件适合拆分</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComp</span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>\nexport default {\n  components: {\n    ChildComp: {\n      methods: {\n        heavy () { /* 耗时任务 */ }\n      },\n      render (h) {\n        return h(&#39;div&#39;, this.heavy())\n      }\n    }\n  }\n}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>但同时也不宜过度拆分组件，尤其是为了所谓组件抽象将一些不需要渲染的组件特意抽出来，组件实例消耗远大于纯dom节点。参考：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fbest-practices%2Fperformance.html%23avoid-unnecessary-component-abstractions" target="_blank" rel="noopener noreferrer">vuejs.org/guide/best-…</a></p></li><li><p>服务端渲染/静态网站生成：SSR/SSG</p><p>如果SPA应用有首屏渲染慢的问题，可以考虑SSR、SSG方案优化。参考<a href="https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fscaling-up%2Fssr.html" target="_blank" rel="noopener noreferrer">SSR Guide</a></p></li></ul>',7)];p.render=function(s,t,p,o,c,l){return n(),a("div",null,e)};export default p;export{t as __pageData};

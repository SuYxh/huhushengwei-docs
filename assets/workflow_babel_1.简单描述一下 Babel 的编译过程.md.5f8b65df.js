import{o as e,c as t,b as r}from"./app.157864df.js";const a='{"title":"简单描述一下 Babel 的编译过程","description":"","frontmatter":{},"headers":[{"level":3,"title":"简单描述一下 Babel 的编译过程","slug":"简单描述一下-babel-的编译过程"}],"relativePath":"workflow/babel/1.简单描述一下 Babel 的编译过程.md","lastUpdated":1662083353139}',l={},o=[r('<h3 id="简单描述一下-babel-的编译过程">简单描述一下 Babel 的编译过程</h3><p>Babel 是一个 JavaScript 编译器，是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><p><code>Babel</code> 本质上就是在操作 <code>AST</code> 来完成代码的转译。AST是抽象语法树（Abstract Syntax Tree, AST）</p><p>如果想要了解更多，可以阅读和尝试：</p><ul><li>分析 <code>AST</code>：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fastexplorer.net%2F" target="_blank" rel="noopener noreferrer">ASTexplorer.net</a></li><li><code>AST</code> 规范：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Festree%2Festree" target="_blank" rel="noopener noreferrer">github.com/estree/estr…</a></li></ul><p><code>Babel</code> 的功能很纯粹，它只是一个编译器。大多数编译器的工作过程可以分为三部分：</p><ol><li><strong>解析（Parse）</strong> ：将源代码转换成更加抽象的表示方法（例如抽象语法树）。包括词法分析和语法分析。词法分析主要把字符流源代码（Char Stream）转换成令牌流（ Token Stream），语法分析主要是将令牌流转换成抽象语法树（Abstract Syntax Tree，AST）。</li><li><strong>转换（Transform）</strong> ：通过 Babel 的插件能力，对（抽象语法树）做一些特殊处理，将高版本语法的 AST 转换成支持低版本语法的 AST。让它符合编译器的期望，当然在此过程中也可以对 AST 的 Node 节点进行优化操作，比如添加、更新以及移除节点等。</li><li><strong>生成（Generate）</strong> ：将 AST 转换成字符串形式的低版本代码，同时也能创建 Source Map 映射。</li></ol><p>经过这三个阶段，代码就被 <code>Babel</code> 转译成功了。</p><p><img src="https://qn.huat.xyz/mac/20220828113504.awebp" alt="img"> <img src="https://qn.huat.xyz/mac/20220828113504.awebp" alt="img"></p>',9)];l.render=function(r,a,l,n,p,i){return e(),t("div",null,o)};export default l;export{a as __pageData};

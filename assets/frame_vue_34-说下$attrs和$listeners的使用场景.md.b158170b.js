import{o as s,c as a,b as n}from"./app.157864df.js";const t='{"title":"34-说下$attrs和$listeners的使用场景","description":"","frontmatter":{},"headers":[{"level":2,"title":"34-说下$attrs和$listeners的使用场景","slug":"_34-说下-attrs和-listeners的使用场景"},{"level":3,"title":"分析","slug":"分析"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"体验","slug":"体验"},{"level":3,"title":"范例","slug":"范例"},{"level":3,"title":"原理","slug":"原理"}],"relativePath":"frame/vue/34-说下$attrs和$listeners的使用场景.md","lastUpdated":1662433250873}',p={},o=[n('<h2 id="_34-说下-attrs和-listeners的使用场景">34-说下$attrs和$listeners的使用场景</h2><h3 id="分析">分析</h3><p>API考察，但attrs和<em>a<strong>t</strong>t<strong>r</strong>s</em>和listeners是比较少用的边界知识，而且vue3有变化，$listeners已经移除，还是有细节可说的。</p><h3 id="思路">思路</h3><ol><li>这两个api的作用</li><li>使用场景分析</li><li>使用方式和细节</li><li>vue3变化</li></ol><h3 id="体验">体验</h3><p>一个包含组件透传属性的对象。</p><blockquote><p>An object that contains the component&#39;s fallthrough attributes.</p></blockquote><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        将非属性特性透传给内部的子组件\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="范例">范例</h3><ol><li>我们可能会有一些属性和事件没有在props中定义，这类称为非属性特性，结合v-bind指令可以直接透传给内部的子组件。</li><li>这类“属性透传”常常用于包装高阶组件时往内部传递属性，常用于爷孙组件之间传参。比如我在扩展A组件时创建了组件B组件，然后在C组件中使用B，此时传递给C的属性中只有props里面声明的属性是给B使用的，其他的都是A需要的，此时就可以利用v-bind=&quot;$attrs&quot;透传下去。</li><li>最常见用法是结合v-bind做展开；$attrs本身不是响应式的，除非访问的属性本身是响应式对象。</li><li>vue2中使用$listeners获取事件，vue3中已移除，均合并到$attrs中，使用起来更简单了。</li></ol><h3 id="原理">原理</h3><p>查看透传属性foo和普通属性bar，发现vnode结构完全相同，这说明vue3中将分辨两者工作由框架完成而非用户指定：</p><div class="language-js"><pre><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>comp foo<span class="token operator">=</span><span class="token string">&quot;foo&quot;</span> bar<span class="token operator">=</span><span class="token string">&quot;bar&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">{</span><span class="token punctuation">{</span>$attrs<span class="token punctuation">.</span>foo<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>\n<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  bar<span class="token operator">:</span> String\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><div class="language-html"><pre><code>\n_createVNode(Comp, {\n    foo: &quot;foo&quot;,\n    bar: &quot;bar&quot;\n})\n</code></pre></div>',16)];p.render=function(n,t,p,e,l,r){return s(),a("div",null,o)};export default p;export{t as __pageData};

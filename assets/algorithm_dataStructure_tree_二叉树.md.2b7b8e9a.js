import{o as t,c as e,b as l}from"./app.157864df.js";const n='{"title":"二叉树","description":"","frontmatter":{},"headers":[{"level":2,"title":"二叉树","slug":"二叉树-1"},{"level":3,"title":"二叉树的概念","slug":"二叉树的概念"},{"level":3,"title":"二叉树的组成","slug":"二叉树的组成"},{"level":3,"title":"二叉树的五种形态","slug":"二叉树的五种形态"},{"level":3,"title":"二叉树的特性","slug":"二叉树的特性"},{"level":3,"title":"特殊的二叉树","slug":"特殊的二叉树"},{"level":3,"title":"二叉树的数据存储","slug":"二叉树的数据存储"}],"relativePath":"algorithm/dataStructure/tree/二叉树.md","lastUpdated":1662083353131}',i={},a=[l('<h1 id="二叉树">二叉树</h1><h2 id="二叉树-1">二叉树</h2><h3 id="二叉树的概念">二叉树的概念</h3><p>如果树中的每一个节点最多只能由两个子节点，这样的树就称为二叉树；</p><h3 id="二叉树的组成">二叉树的组成</h3><ul><li>二叉树可以为空，也就是没有节点；</li><li>若二叉树不为空，则它由根节点和称为其左子树 TL 和右子树 TR 的两个不相交的二叉树组成；</li></ul><h3 id="二叉树的五种形态">二叉树的五种形态</h3><p><img src="https://qn.huat.xyz/mac/20220829104305.png" alt="image"></p><p>上图分别表示：空的二叉树、只有一个节点的二叉树、只有左子树 TL 的二叉树、只有右子树 TR 的二叉树和有左右两个子树的二叉树。</p><h3 id="二叉树的特性">二叉树的特性</h3><ul><li>一个二叉树的第 i 层的最大节点树为：2^(i-1)^，i &gt;= 1；</li><li>深度为 k 的二叉树的最大节点总数为：2^k^ - 1 ，k &gt;= 1；</li><li>对任何非空二叉树，若 n~0~ 表示叶子节点的个数，n~2~表示度为 2 的非叶子节点个数，那么两者满足关系：n~0~ = n~2~ + 1；如下图所示：H，E，I，J，G 为叶子节点，总数为 5；A，B，C，F 为度为 2 的非叶子节点，总数为 4；满足 n~0~ = n~2~ + 1 的规律。</li></ul><p><img src="https://qn.huat.xyz/mac/20220829104307.png" alt="image"></p><h3 id="特殊的二叉树">特殊的二叉树</h3><h4 id="完美二叉树">完美二叉树</h4><p>完美二叉树（Perfect Binary Tree）也成为满二叉树（Full Binary Tree），在二叉树中，除了最下一层的叶子节点外，每层节点都有 2 个子节点，这就构成了完美二叉树。</p><p><img src="https://qn.huat.xyz/mac/20220829104309.png" alt="image"></p><h4 id="完全二叉树">完全二叉树</h4><p>完全二叉树（Complete Binary Tree）:</p><ul><li>除了二叉树最后一层外，其他各层的节点数都达到了最大值；</li><li>并且，最后一层的叶子节点从左向右是连续存在，只缺失右侧若干叶子节点；</li><li>完美二叉树是特殊的完全二叉树；</li></ul><p><img src="https://qn.huat.xyz/mac/20220829104310.png" alt="image"></p><p>在上图中，由于 H 缺失了右子节点，所以它不是完全二叉树。</p><h3 id="二叉树的数据存储">二叉树的数据存储</h3><p>常见的二叉树存储方式为数组和链表：</p><h4 id="使用数组">使用数组</h4><ul><li>完全二叉树：按从上到下，从左到右的方式存储数据。</li></ul><p><img src="https://qn.huat.xyz/mac/20220829104311.png" alt="image"></p><table><thead><tr><th style="text-align:center;">节点</th><th style="text-align:center;">A</th><th style="text-align:center;">B</th><th style="text-align:center;">C</th><th style="text-align:center;">D</th><th style="text-align:center;">E</th><th style="text-align:center;">F</th><th style="text-align:center;">G</th><th style="text-align:center;">H</th><th style="text-align:center;">I</th></tr></thead><tbody><tr><td style="text-align:center;">序号</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td></tr></tbody></table><p>使用数组存储时，取数据的时候也十分方便：左子节点的序号等于父节点序号 _ 2，右子节点的序号等于父节点序号 _ 2 + 1 。</p><ul><li>非完全二叉树：非完全二叉树需要转换成完全二叉树才能按照上面的方案存储，这样会浪费很大的存储空间。</li></ul><p><img src="https://qn.huat.xyz/mac/20220829104313.png" alt="image"></p><table><thead><tr><th style="text-align:center;">节点</th><th style="text-align:center;">A</th><th style="text-align:center;">B</th><th style="text-align:center;">C</th><th style="text-align:center;">^</th><th style="text-align:center;">^</th><th style="text-align:center;">F</th><th style="text-align:center;">^</th><th style="text-align:center;">^</th><th style="text-align:center;">^</th><th style="text-align:center;">^</th><th style="text-align:center;">^</th><th style="text-align:center;">^</th><th style="text-align:center;">M</th></tr></thead><tbody><tr><td style="text-align:center;">序号</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td><td style="text-align:center;">10</td><td style="text-align:center;">11</td><td style="text-align:center;">12</td><td style="text-align:center;">13</td></tr></tbody></table><h4 id="使用链表">使用链表</h4><p>二叉树最常见的存储方式为链表：每一个节点封装成一个 Node，Node 中包含存储的数据、左节点的引用和右节点的引用。</p><p><img src="https://qn.huat.xyz/mac/20220829104317.png" alt="image"></p>',34)];i.render=function(l,n,i,h,r,d){return t(),e("div",null,a)};export default i;export{n as __pageData};

import{o as n,c as s,b as a}from"./app.157864df.js";const t='{"title":"41-vuex中actions和mutations有什么区别？","description":"","frontmatter":{},"headers":[{"level":2,"title":"41-vuex中actions和mutations有什么区别？","slug":"_41-vuex中actions和mutations有什么区别？"},{"level":3,"title":"题目分析","slug":"题目分析"},{"level":3,"title":"体验","slug":"体验"},{"level":3,"title":"答题思路","slug":"答题思路"},{"level":3,"title":"回答范例","slug":"回答范例"},{"level":3,"title":"知其所以然","slug":"知其所以然"},{"level":3,"title":"","slug":""}],"relativePath":"frame/vue/41-vuex中actions和mutations有什么区别.md","lastUpdated":1662433250873}',o={},p=[a('<h2 id="_41-vuex中actions和mutations有什么区别？">41-vuex中actions和mutations有什么区别？</h2><h3 id="题目分析">题目分析</h3><p><code>mutations</code>和<code>actions</code>是<code>vuex</code>带来的两个独特的概念。新手程序员容易混淆，所以面试官喜欢问。</p><p>我们只需记住修改状态只能是<code>mutations</code>，<code>actions</code>只能通过提交<code>mutation</code>修改状态即可。</p><hr><h3 id="体验">体验</h3><p>看下面例子可知，<code>Action</code> 类似于 <code>mutation</code>，不同在于：</p><ul><li><code>Action</code> 提交的是 <code>mutation</code>，而不是直接变更状态。</li><li><code>Action</code> 可以包含任意异步操作。</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  state<span class="token operator">:</span> <span class="token punctuation">{</span>\n    count<span class="token operator">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  actions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><hr><h3 id="答题思路">答题思路</h3><ol><li>给出两者概念说明区别</li><li>举例说明应用场景</li><li>使用细节不同</li><li>简单阐述实现上差异</li></ol><hr><h3 id="回答范例">回答范例</h3><ol><li>官方文档说：更改 Vuex 的 store 中的状态的唯一方法是提交 <code>mutation</code>，<code>mutation</code> 非常类似于事件：每个 <code>mutation</code> 都有一个字符串的<strong>类型 (type)*<em>和一个*</em> 回调函数 (handler)</strong> 。<code>Action</code> 类似于 <code>mutation</code>，不同在于：<code>Action</code>可以包含任意异步操作，但它不能修改状态， 需要提交<code>mutation</code>才能变更状态。</li><li>因此，开发时，包含异步操作或者复杂业务组合时使用action；需要直接修改状态则提交mutation。但由于dispatch和commit是两个API，容易引起混淆，实践中也会采用统一使用dispatch action的方式。</li><li>调用dispatch和commit两个API时几乎完全一样，但是定义两者时却不甚相同，mutation的回调函数接收参数是state对象。action则是与Store实例具有相同方法和属性的上下文context对象，因此一般会解构它为<code>{commit, dispatch, state}</code>，从而方便编码。另外dispatch会返回Promise实例便于处理内部异步结果。</li><li>实现上commit(type)方法相当于调用<code>options.mutations[type](state)</code>；<code>dispatch(type)</code>方法相当于调用<code>options.actions[type](store)</code>，这样就很容易理解两者使用上的不同了。</li></ol><hr><h3 id="知其所以然">知其所以然</h3><p>我们可以像下面这样简单实现<code>commit</code>和<code>dispatch</code>，从而辨别两者不同：</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>state<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options\n    <span class="token punctuation">}</span>\n    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 传入上下文和参数1都是state对象</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 传入上下文和参数1都是store本身</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id=""></h3>',20)];o.render=function(a,t,o,c,e,i){return n(),s("div",null,p)};export default o;export{t as __pageData};

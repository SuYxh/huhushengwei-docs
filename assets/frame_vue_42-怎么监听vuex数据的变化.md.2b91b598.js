import{o as n,c as s,b as a}from"./app.157864df.js";const t='{"title":"42-怎么监听vuex数据的变化？","description":"","frontmatter":{},"headers":[{"level":2,"title":"42-怎么监听vuex数据的变化？","slug":"_42-怎么监听vuex数据的变化？"},{"level":3,"title":"分析","slug":"分析"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"回答范例","slug":"回答范例"},{"level":3,"title":"实践","slug":"实践"}],"relativePath":"frame/vue/42-怎么监听vuex数据的变化.md","lastUpdated":1662083353135}',p={},e=[a('<h2 id="_42-怎么监听vuex数据的变化？">42-怎么监听vuex数据的变化？</h2><h3 id="分析">分析</h3><p>vuex数据状态是响应式的，所以状态变视图跟着变，但是有时还是需要知道数据状态变了从而做一些事情。</p><p>既然状态都是响应式的，那自然可以<code>watch</code>，另外vuex也提供了订阅的API：<code>store.subscribe()</code>。</p><hr><h3 id="思路">思路</h3><ul><li>总述知道的方法</li><li>分别阐述用法</li><li>选择和场景</li></ul><hr><h3 id="回答范例">回答范例</h3><ul><li>我知道几种方法： <ul><li>可以通过watch选项或者watch方法监听状态</li><li>可以使用vuex提供的API：store.subscribe()</li></ul></li><li>watch选项方式，可以以字符串形式监听<code>$store.state.xx</code>；subscribe方式，可以调用store.subscribe(cb),回调函数接收mutation对象和state对象，这样可以进一步判断mutation.type是否是期待的那个，从而进一步做后续处理。</li><li>watch方式简单好用，且能获取变化前后值，首选；subscribe方法会被所有commit行为触发，因此还需要判断mutation.type，用起来略繁琐，一般用于vuex插件中。</li></ul><h3 id="实践">实践</h3><p>watch方式</p><div class="language-js"><pre><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&#39;$store.state.counter&#39;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;counter change!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>subscribe方式：</p><div class="language-js"><pre><code>  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;counter change in subscribe()!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',15)];p.render=function(a,t,p,o,c,u){return n(),s("div",null,e)};export default p;export{t as __pageData};

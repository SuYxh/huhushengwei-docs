import{o as n,c as s,b as a}from"./app.157864df.js";const t='{"title":"04-能说一说双向绑定使用和原理吗？","description":"","frontmatter":{},"headers":[{"level":2,"title":"04-能说一说双向绑定使用和原理吗？","slug":"_04-能说一说双向绑定使用和原理吗？"},{"level":3,"title":"题目分析：","slug":"题目分析："},{"level":3,"title":"思路分析：","slug":"思路分析："},{"level":3,"title":"回答范例：","slug":"回答范例："},{"level":3,"title":"可能的追问：","slug":"可能的追问："},{"level":3,"title":"知其所以然：","slug":"知其所以然："},{"level":2,"title":"","slug":""}],"relativePath":"frame/vue/04-能说一说双向绑定使用和原理吗.md","lastUpdated":1662083353135}',p={},o=[a('<h2 id="_04-能说一说双向绑定使用和原理吗？">04-能说一说双向绑定使用和原理吗？</h2><h3 id="题目分析：">题目分析：</h3><p>双向绑定是<code>vue</code>的特色之一，开发中必然会用到的知识点，然而此题还问了实现原理，升级为深度考查。</p><hr><h3 id="思路分析：">思路分析：</h3><ol><li>给出双绑定义</li><li>双绑带来的好处</li><li>在哪使用双绑</li><li>使用方式、使用细节、vue3变化</li><li>原理实现描述</li></ol><hr><h3 id="回答范例：">回答范例：</h3><ol><li>vue中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图中变化能改变该值。</li><li><code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>。使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li><li>通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li><li>通过<code>&lt;input v-model=&quot;xxx&quot;&gt;</code>的方式将xxx的值绑定到表单元素value上；对于checkbox，可以使用<code>true-value</code>和false-value指定特殊的值，对于radio可以使用value指定特殊的值；对于select可以通过options元素的value设置特殊的值；还可以结合.lazy,.number,.trim对v-mode的行为做进一步限定；<code>v-model</code>用在自定义组件上时又会有很大不同，vue3中它类似于<code>sync</code>修饰符，最终展开的结果是modelValue属性和update:modelValue事件；vue3中我们甚至可以用参数形式指定多个不同的绑定，例如v-model:foo和v-model:bar，非常强大！</li><li><code>v-model</code>是一个指令，它的神奇魔法实际上是vue的编译器完成的。我做过测试，包含<code>v-model</code>的模板，转换为渲染函数之后，实际上还是是value属性的绑定以及input事件监听，事件回调函数中会做相应变量更新操作。编译器根据表单元素的不同会展开不同的DOM属性和事件对，比如text类型的input和textarea会展开为value和input事件；checkbox和radio类型的input会展开为checked和change事件；select用value作为属性，用change作为事件。</li></ol><hr><h3 id="可能的追问：">可能的追问：</h3><ol><li><code>v-model</code>和<code>sync</code>修饰符有什么区别</li><li>自定义组件使用<code>v-model</code>如果想要改变事件名或者属性名应该怎么做</li></ol><hr><h3 id="知其所以然：">知其所以然：</h3><p>测试代码，<a href="https://link.juejin.cn/?target=.%2Ftest.html" target="_blank" rel="noopener noreferrer">test.html</a></p><p>观察输出的渲染函数：</p><div class="language-js"><pre><code><span class="token comment">// &lt;input type=&quot;text&quot; v-model=&quot;foo&quot;&gt;</span>\n<span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> \n  directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">,</span> rawName<span class="token operator">:</span> <span class="token string">&quot;v-model&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span> expression<span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n  attrs<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  domProps<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  on<span class="token operator">:</span> <span class="token punctuation">{</span> \n    <span class="token string">&quot;input&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token keyword">if</span> <span class="token punctuation">(</span>$event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> \n      foo <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><hr><div class="language-js"><pre><code><span class="token comment">// &lt;input type=&quot;checkbox&quot; v-model=&quot;bar&quot;&gt;</span>\n<span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> \n  directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">,</span> rawName<span class="token operator">:</span> <span class="token string">&quot;v-model&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">,</span> expression<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n  attrs<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;checkbox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  domProps<span class="token operator">:</span> <span class="token punctuation">{</span> \n    <span class="token string">&quot;checked&quot;</span><span class="token operator">:</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">_i</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  on<span class="token operator">:</span> <span class="token punctuation">{</span> \n    <span class="token string">&quot;change&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token keyword">var</span> $$a <span class="token operator">=</span> bar<span class="token punctuation">,</span> $$el <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">,</span> $$c <span class="token operator">=</span> $$el<span class="token punctuation">.</span>checked <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>$$a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">var</span> $$v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> $$i <span class="token operator">=</span> <span class="token function">_i</span><span class="token punctuation">(</span>$$a<span class="token punctuation">,</span> $$v<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>$$el<span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span> $$i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> $$a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>$$v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> \n        <span class="token keyword">else</span> <span class="token punctuation">{</span> \n          $$i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> $$a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> $$i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>$$a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>$$i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> \n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> \n        bar <span class="token operator">=</span> $$c \n      <span class="token punctuation">}</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><hr><div class="language-js"><pre><code><span class="token comment">// &lt;select v-model=&quot;baz&quot;&gt;</span>\n<span class="token comment">//     &lt;option value=&quot;vue&quot;&gt;vue&lt;/option&gt;</span>\n<span class="token comment">//     &lt;option value=&quot;react&quot;&gt;react&lt;/option&gt;</span>\n<span class="token comment">// &lt;/select&gt;</span>\n<span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;select&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> \n  directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">,</span> rawName<span class="token operator">:</span> <span class="token string">&quot;v-model&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">,</span> expression<span class="token operator">:</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n  on<span class="token operator">:</span> <span class="token punctuation">{</span> \n    <span class="token string">&quot;change&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token keyword">var</span> $$selectedVal <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>\n        $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>options<span class="token punctuation">,</span> \n        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> o<span class="token punctuation">.</span>selected <span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>\n        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n          <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token string">&quot;_value&quot;</span> <span class="token keyword">in</span> o <span class="token operator">?</span> o<span class="token punctuation">.</span>_value <span class="token operator">:</span> o<span class="token punctuation">.</span>value<span class="token punctuation">;</span> \n          <span class="token keyword">return</span> val \n        <span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      baz <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>multiple <span class="token operator">?</span> $$selectedVal <span class="token operator">:</span> $$selectedVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;option&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n  <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;option&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&quot;react&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><hr><h2 id=""></h2>',23)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export default p;export{t as __pageData};

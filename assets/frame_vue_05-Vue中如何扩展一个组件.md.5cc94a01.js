import{o as n,c as s,b as a}from"./app.157864df.js";const t='{"title":"05-Vue中如何扩展一个组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"05-Vue中如何扩展一个组件","slug":"_05-vue中如何扩展一个组件"},{"level":3,"title":"答题思路：","slug":"答题思路："},{"level":3,"title":"回答范例：","slug":"回答范例："},{"level":3,"title":"可能的追问","slug":"可能的追问"},{"level":3,"title":"知其所以然","slug":"知其所以然"},{"level":2,"title":"","slug":""}],"relativePath":"frame/vue/05-Vue中如何扩展一个组件.md","lastUpdated":1662083353135}',p={},o=[a('<h2 id="_05-vue中如何扩展一个组件">05-Vue中如何扩展一个组件</h2><p>此题属于实践题，考察大家对vue常用api使用熟练度，答题时不仅要列出这些解决方案，同时最好说出他们异同。</p><h3 id="答题思路：">答题思路：</h3><ol><li>按照逻辑扩展和内容扩展来列举， <ul><li>逻辑扩展有：mixins、extends、composition api；</li><li>内容扩展有slots；</li></ul></li><li>分别说出他们使用方法、场景差异和问题。</li><li>作为扩展，还可以说说vue3中新引入的composition api带来的变化</li></ol><hr><h3 id="回答范例：">回答范例：</h3><ol><li><p>常见的组件扩展方法有：mixins，slots，extends等</p></li><li><p>混入mixins是分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p><div class="language-js"><pre><code><span class="token comment">// 复用代码：它是一个配置对象，选项和组件里面一样</span>\n<span class="token keyword">const</span> mymixin <span class="token operator">=</span> <span class="token punctuation">{</span>\n   methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 全局混入：将混入对象传入</span>\nVue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>mymixin<span class="token punctuation">)</span>\n\n<span class="token comment">// 局部混入：做数组项设置到mixins选项，仅作用于当前组件</span>\n<span class="token keyword">const</span> Comp <span class="token operator">=</span> <span class="token punctuation">{</span>\n   mixins<span class="token operator">:</span> <span class="token punctuation">[</span>mymixin<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n复制代码\n</code></pre></div></li></ol><hr><ol><li><p>插槽主要用于vue组件中的内容分发，也可以用于组件扩展。</p><p>子组件Child</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>这个内容会被父组件传递的内容替换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n复制代码\n</code></pre></div><p>父组件Parent</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">&gt;</span></span>来自老爹的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n复制代码\n</code></pre></div><p>如果要精确分发到不同位置可以使用具名插槽，如果要使用子组件中的数据可以使用作用域插槽。</p></li></ol><hr><ol><li><p>组件选项中还有一个不太常用的选项extends，也可以起到扩展组件的目的</p><div class="language-js"><pre><code><span class="token comment">// 扩展对象</span>\n<span class="token keyword">const</span> myextends <span class="token operator">=</span> <span class="token punctuation">{</span>\n   methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 组件扩展：做数组项设置到extends选项，仅作用于当前组件</span>\n<span class="token comment">// 跟混入的不同是它只能扩展单个对象</span>\n<span class="token comment">// 另外如果和混入发生冲突，该选项优先级较高，优先起作用</span>\n<span class="token keyword">const</span> Comp <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token keyword">extends</span><span class="token operator">:</span> myextends\n<span class="token punctuation">}</span>\n复制代码\n</code></pre></div></li></ol><hr><ol><li><p>混入的数据和方法<strong>不能明确判断来源</strong>且可能和当前组件内变量<strong>产生命名冲突</strong>，vue3中引入的composition api，可以很好解决这些问题，利用独立出来的响应式模块可以很方便的编写独立逻辑并提供响应式的数据，然后在setup选项中组合使用，增强代码的可读性和维护性。例如：</p><div class="language-js"><pre><code><span class="token comment">// 复用逻辑1</span>\n<span class="token keyword">function</span> <span class="token function">useXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// 复用逻辑2</span>\n<span class="token keyword">function</span> <span class="token function">useYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// 逻辑组合</span>\n<span class="token keyword">const</span> Comp <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>xx<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>yy<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n复制代码\n</code></pre></div></li></ol><hr><h3 id="可能的追问">可能的追问</h3><p>Vue.extend方法你用过吗？它能用来做组件扩展吗？</p><hr><h3 id="知其所以然">知其所以然</h3><p>mixins原理：</p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fvuejs%2Fcore%2Fblob%2FHEAD%2Fpackages%2Fruntime-core%2Fsrc%2FapiCreateApp.ts%23L232-L233" target="_blank" rel="noopener noreferrer">github1s.com/vuejs/core/…</a></p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fvuejs%2Fcore%2Fblob%2FHEAD%2Fpackages%2Fruntime-core%2Fsrc%2FcomponentOptions.ts%23L545" target="_blank" rel="noopener noreferrer">github1s.com/vuejs/core/…</a></p><p>slots原理：</p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fvuejs%2Fcore%2Fblob%2FHEAD%2Fpackages%2Fruntime-core%2Fsrc%2FcomponentSlots.ts%23L129-L130" target="_blank" rel="noopener noreferrer">github1s.com/vuejs/core/…</a></p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fvuejs%2Fcore%2Fblob%2FHEAD%2Fpackages%2Fruntime-core%2Fsrc%2Frenderer.ts%23L1373-L1374" target="_blank" rel="noopener noreferrer">github1s.com/vuejs/core/…</a></p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fvuejs%2Fcore%2Fblob%2FHEAD%2Fpackages%2Fruntime-core%2Fsrc%2Fhelpers%2FrenderSlot.ts%23L23-L24" target="_blank" rel="noopener noreferrer">github1s.com/vuejs/core/…</a></p><hr><h2 id=""></h2>',27)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export default p;export{t as __pageData};

import{o as n,c as s,b as a}from"./app.157864df.js";const t='{"title":"36-什么是递归组件？举个例子说明下？","description":"","frontmatter":{},"headers":[{"level":2,"title":"36-什么是递归组件？举个例子说明下？","slug":"_36-什么是递归组件？举个例子说明下？"},{"level":3,"title":"分析","slug":"分析"},{"level":3,"title":"体验","slug":"体验"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"回答范例","slug":"回答范例"},{"level":3,"title":"知其所以然","slug":"知其所以然"},{"level":3,"title":"","slug":""}],"relativePath":"frame/vue/36-什么是递归组件？举个例子说明下.md","lastUpdated":1662083353135}',p={},e=[a('<h2 id="_36-什么是递归组件？举个例子说明下？">36-什么是递归组件？举个例子说明下？</h2><h3 id="分析">分析</h3><p>递归组件我们用的比较少，但是在Tree、Menu这类组件中会被用到。</p><hr><h3 id="体验">体验</h3><p>组件通过组件名称引用它自己，这种情况就是递归组件。</p><blockquote><p>An SFC can implicitly refer to itself via its filename.</p></blockquote><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> {{ model.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isOpen<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isFolder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token comment">&lt;!-- 注意这里：组件递归渲染了它自己 --&gt;</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreeItem</span>\n        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model in model.children<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreeItem</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;TreeItem&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><hr><h3 id="思路">思路</h3><ul><li>下定义</li><li>使用场景</li><li>使用细节</li><li>原理阐述</li></ul><hr><h3 id="回答范例">回答范例</h3><ol><li>如果某个组件通过组件名称引用它自己，这种情况就是递归组件。</li><li>实际开发中类似Tree、Menu这类组件，它们的节点往往包含子节点，子节点结构和父节点往往是相同的。这类组件的数据往往也是树形结构，这种都是使用递归组件的典型场景。</li><li>使用递归组件时，由于我们并未也不能在组件内部导入它自己，所以设置组件<code>name</code>属性，用来查找组件定义，如果使用SFC，则可以通过SFC文件名推断。组件内部通常也要有递归结束条件，比如model.children这样的判断。</li><li>查看生成渲染函数可知，递归组件查找时会传递一个布尔值给<code>resolveComponent</code>，这样实际获取的组件就是当前组件本身。</li></ol><hr><h3 id="知其所以然">知其所以然</h3><p>递归组件编译结果中，获取组件时会传递一个标识符 <code>_resolveComponent(&quot;Comp&quot;, true)</code></p><div class="language-ts"><pre><code><span class="token keyword">const</span> _component_Comp <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">&quot;Comp&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n</code></pre></div><p>就是在传递<code>maybeSelfReference</code></p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolveComponent</span><span class="token punctuation">(</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  maybeSelfReference<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ConcreteComponent <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">resolveAsset</span><span class="token punctuation">(</span><span class="token constant">COMPONENTS</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> maybeSelfReference<span class="token punctuation">)</span> <span class="token operator">||</span> name\n<span class="token punctuation">}</span>\n</code></pre></div><p>resolveAsset中最终返回的是组件自身：</p><div class="language-ts"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res <span class="token operator">&amp;&amp;</span> maybeSelfReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// fallback to implicit self-reference</span>\n    <span class="token keyword">return</span> Component\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id=""></h3>',23)];p.render=function(a,t,p,o,l,c){return n(),s("div",null,e)};export default p;export{t as __pageData};

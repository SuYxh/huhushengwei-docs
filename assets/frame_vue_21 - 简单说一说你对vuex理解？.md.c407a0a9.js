import{o as e,c as l,b as t}from"./app.157864df.js";const i='{"title":"21 - 简单说一说你对vuex理解？","description":"","frontmatter":{},"headers":[{"level":2,"title":"21 - 简单说一说你对vuex理解？","slug":"_21-简单说一说你对vuex理解？"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"范例","slug":"范例"},{"level":3,"title":"可能的追问","slug":"可能的追问"},{"level":2,"title":"","slug":""}],"relativePath":"frame/vue/21 - 简单说一说你对vuex理解？.md","lastUpdated":1662433250873}',r={},a=[t('<h2 id="_21-简单说一说你对vuex理解？">21 - 简单说一说你对vuex理解？</h2><p><img src="https://qn.huat.xyz/mac/20220828184939.awebp" alt="img"></p><h3 id="思路">思路</h3><ol><li>给定义</li><li>必要性阐述</li><li>何时使用</li><li>拓展：一些个人思考、实践经验等</li></ol><hr><h3 id="范例">范例</h3><ol><li>Vuex 是一个专为 Vue.js 应用开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储，管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>我们期待以一种简单的“单向数据流”的方式管理应用，即状态 -&gt; 视图 -&gt; 操作单向循环的方式。但当我们的应用遇到<strong>多个组件共享状态</strong>时，比如：多个视图依赖于同一状态或者来自不同视图的行为需要变更同一状态。此时单向数据流的简洁性很容易被破坏。因此，我们有必要把组件的共享状态抽取出来，以一个全局单例模式管理。通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。这是vuex存在的必要性，它和react生态中的redux之类是一个概念。</li><li>Vuex 解决状态管理的同时引入了不少概念：例如state、mutation、action等，是否需要引入还需要根据应用的实际情况衡量一下：如果不打算开发大型单页应用，使用 Vuex 反而是繁琐冗余的，一个简单的 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fv3.cn.vuejs.org%2Fguide%2Fstate-management.html%23%E4%BB%8E%E9%9B%B6%E6%89%93%E9%80%A0%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86" target="_blank" rel="noopener noreferrer">store 模式</a>就足够了。但是，如果要构建一个中大型单页应用，Vuex 基本是标配。</li><li>我在使用vuex过程中感受到一些blabla</li></ol><hr><h3 id="可能的追问">可能的追问</h3><ol><li>vuex有什么缺点吗？你在开发过程中有遇到什么问题吗？</li><li>action和mutation的区别是什么？为什么要区分它们？</li></ol><hr><h2 id=""></h2>',12)];r.render=function(t,i,r,u,o,n){return e(),l("div",null,a)};export default r;export{i as __pageData};

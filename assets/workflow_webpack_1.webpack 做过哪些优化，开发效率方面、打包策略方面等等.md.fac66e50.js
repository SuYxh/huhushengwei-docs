import{o as n,c as a,b as s}from"./app.157864df.js";const p='{"title":"webpack 做过哪些优化，开发效率方面、打包策略方面等等","description":"","frontmatter":{},"headers":[{"level":3,"title":"webpack 做过哪些优化，开发效率方面、打包策略方面等等","slug":"webpack-做过哪些优化，开发效率方面、打包策略方面等等"}],"relativePath":"workflow/webpack/1.webpack 做过哪些优化，开发效率方面、打包策略方面等等.md","lastUpdated":1662083353139}',e={},t=[s('<h3 id="webpack-做过哪些优化，开发效率方面、打包策略方面等等">webpack 做过哪些优化，开发效率方面、打包策略方面等等</h3><p><strong>1）优化 Webpack 的构建速度</strong></p><ul><li>使用高版本的 Webpack （使用webpack4）</li><li>多线程/多实例构建：HappyPack(不维护了)、thread-loader</li><li>缩小打包作用域： <ul><li>exclude/include (确定 loader 规则范围)</li><li>resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)</li><li>resolve.extensions 尽可能减少后缀尝试的可能性</li><li>noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)</li><li>IgnorePlugin (完全排除模块)</li><li>合理使用alias</li></ul></li><li>充分利用缓存提升二次构建速度： <ul><li>babel-loader 开启缓存</li><li>terser-webpack-plugin 开启缓存</li><li>使用 cache-loader 或者 hard-source-webpack-plugin 注意：thread-loader 和 cache-loader 兩個要一起使用的話，請先放 cache-loader 接著是 thread-loader 最後才是 heavy-loader</li></ul></li><li>DLL： <ul><li>使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。 2）使用webpack4-优化原因</li></ul></li><li>(a)V8带来的优化（for of替代forEach、Map和Set替代Object、includes替代indexOf）</li><li>(b)默认使用更快的md4 hash算法</li><li>(c)webpacks AST可以直接从loader传递给AST，减少解析时间</li><li>(d)使用字符串方法替代正则表达式 ①noParse</li><li>不去解析某个库内部的依赖关系</li><li>比如jquery 这个库是独立的， 则不去解析这个库内部依赖的其他的东西</li><li>在独立库的时候可以使用</li></ul><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    noParse<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">jquery</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>②IgnorePlugin</p><ul><li>忽略掉某些内容 不去解析依赖库内部引用的某些内容</li><li>从moment中引用 ./locol 则忽略掉</li><li>如果要用local的话 则必须在项目中必须手动引入</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;moment/locale/zh-cn&#39;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">Webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>local<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>③dillPlugin</p><ul><li>不会多次打包， 优化打包时间</li><li>先把依赖的不变的库打包</li><li>生成 manifest.json文件</li><li>然后在webpack.config中引入</li><li>webpack.DllPlugin Webpack.DllReferencePlugin ④happypack -&gt; thread-loader</li><li>大项目的时候开启多线程打包</li><li>影响前端发布速度的有两个方面，一个是构建，一个就是压缩，把这两个东西优化起来，可以减少很多发布的时间。 ⑤thread-loader thread-loader 会将您的 loader 放置在一个 worker 池里面运行，以达到多线程构建。 把这个 loader 放置在其他 loader 之前（如下图 example 的位置）， 放置在这个 loader 之后的 loader 就会在一个单独的 worker 池(worker pool)中运行。</li></ul><div class="language-js"><pre><code><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">&quot;thread-loader&quot;</span><span class="token punctuation">,</span>\n          <span class="token comment">// 你的高开销的loader放置在此 (e.g babel-loader)</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>每个 worker 都是一个单独的有 600ms 限制的 node.js 进程。同时跨进程的数据交换也会被限制。请在高开销的loader中使用，否则效果不佳</p><p>⑥压缩加速——开启多线程压缩</p><ul><li>不推荐使用 webpack-paralle-uglify-plugin，项目基本处于没人维护的阶段，issue 没人处理，pr没人合并。 Webpack 4.0以前：uglifyjs-webpack-plugin，parallel参数</li></ul><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        parallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>推荐使用 terser-webpack-plugin</li></ul><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span>\n      parallel<span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token comment">// 多线程</span>\n    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>2）优化 Webpack 的打包体积</strong></p><ul><li>压缩代码</li><li>提取页面公共资源：</li><li>Tree shaking</li><li>Scope hoisting</li><li>图片压缩</li><li>动态Polyfill <strong>3）speed-measure-webpack-plugin</strong> 简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。 <strong>开发阶段</strong></li></ul><p>开启多核压缩 插件：** terser-webpack-plugin **</p><div class="language-js"><pre><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n        minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                parallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                terserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    ecma<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>传送门 ☞<a href="https://juejin.cn/post/6996188856164810789" target="_blank" rel="noopener noreferrer"># 工程化专题</a></p><p><a href="https://juejin.cn/post/7011765691812413476" target="_blank" rel="noopener noreferrer">前端八股文之webpack</a></p>',22)];e.render=function(s,p,e,o,l,c){return n(),a("div",null,t)};export default e;export{p as __pageData};

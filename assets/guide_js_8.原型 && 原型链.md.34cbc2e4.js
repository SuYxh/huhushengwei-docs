import{o as t,c as o,b as e}from"./app.157864df.js";const p='{"title":"原型 && 原型链","description":"","frontmatter":{},"headers":[{"level":3,"title":"原型 && 原型链","slug":"原型-原型链"}],"relativePath":"guide/js/8.原型 && 原型链.md","lastUpdated":1662433250873}',r={},_=[e('<h3 id="原型-原型链">原型 &amp;&amp; 原型链</h3><p><strong>原型关系：</strong></p><ul><li>每个 class都有显示原型 prototype</li><li>每个实例都有隐式原型 _ proto_</li><li>实例的_ proto_指向对应 class 的 prototype</li></ul><p>‌ <strong>原型:</strong> 在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个<code>函数对象</code>都有一个<code>prototype</code> 属性，这个属性指向函数的<code>原型对象</code>。</p><p>原型链：函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范</p><p><strong>特点:</strong> <code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p>',6)];r.render=function(e,p,r,s,l,c){return t(),o("div",null,_)};export default r;export{p as __pageData};

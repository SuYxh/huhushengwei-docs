import{o as n,c as s,b as a}from"./app.157864df.js";const t='{"title":"React 组件通信方式","description":"","frontmatter":{},"headers":[{"level":3,"title":"React 组件通信方式","slug":"react-组件通信方式"}],"relativePath":"frame/react/2.React 组件通信方式.md","lastUpdated":1662083353135}',p={},o=[a('<h3 id="react-组件通信方式">React 组件通信方式</h3><p>react组件间通信常见的几种情况:</p><ul><li><ol><li>父组件向子组件通信</li></ol></li><li><ol><li>子组件向父组件通信</li></ol></li><li><ol><li>跨级组件通信</li></ol></li><li><ol><li>非嵌套关系的组件通信</li></ol></li></ul><h4 id="_1）父组件向子组件通信">1）父组件向子组件通信</h4><p>父组件通过 props 向子组件传递需要的信息。父传子是在父组件中直接绑定一个正常的属性，这个属性就是指具体的值，在子组件中，用props就可以获取到这个值</p><div class="language-js"><pre><code><span class="token comment">// 子组件: Child</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 父组件 Parent</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Parent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Child name<span class="token operator">=</span><span class="token string">&quot;京程一灯&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_2）子组件向父组件通信">2）子组件向父组件通信</h4><p>props+回调的方式，使用公共组件进行状态提升。子传父是先在父组件上绑定属性设置为一个函数，当子组件需要给父组件传值的时候，则通过props调用该函数将参数传入到该函数当中，此时就可以在父组件中的函数中接收到该参数了，这个参数则为子组件传过来的值</p><div class="language-js"><pre><code><span class="token comment">// 子组件: Child</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">cb</span> <span class="token operator">=</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n          props<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token string">&quot;京程一灯欢迎你!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>京程一灯欢迎你<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 父组件 Parent</span>\n<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>Child callback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">&gt;</span>    \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_3）跨级组件通信">3）跨级组件通信</h4><p>即父组件向子组件的子组件通信，向更深层子组件通信。</p><ul><li>使用props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递props，增加了复杂度，并且这些props并不是中间组件自己需要的。</li><li>使用context，context相当于一个大容器，我们可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用context实现。</li></ul><div class="language-js"><pre><code><span class="token comment">// context方式实现跨级组件通信 </span>\n<span class="token comment">// Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据</span>\n\n<span class="token keyword">const</span> BatteryContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//  子组件的子组件 </span>\n<span class="token keyword">class</span> <span class="token class-name">GrandChild</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>BatteryContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>\n                <span class="token punctuation">{</span>\n                    <span class="token parameter">color</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;color&quot;</span><span class="token operator">:</span>color<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>我是红色的<span class="token operator">:</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n                <span class="token punctuation">}</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>BatteryContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>\n        <span class="token punctuation">)</span> \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//  子组件</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>GrandChild<span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 父组件</span>\n<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n      state <span class="token operator">=</span> <span class="token punctuation">{</span>\n          color<span class="token operator">:</span><span class="token string">&quot;red&quot;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span>color<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n          <span class="token keyword">return</span> <span class="token punctuation">(</span>\n          <span class="token operator">&lt;</span>BatteryContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token operator">&lt;</span>Child<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>BatteryContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span> \n          <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_4）非嵌套关系的组件通信">4）非嵌套关系的组件通信</h4><p>即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。</p><ul><li><ol><li>可以使用自定义事件通信（发布订阅模式），使用pubsub-js</li></ol></li><li><ol><li>可以通过redux等进行全局状态管理</li></ol></li><li><ol><li>如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。</li></ol></li><li><ol><li>也可以new一个 Vue 的 EventBus,进行事件监听，一边执行监听，一边执行新增 VUE的eventBus 就是发布订阅模式，是可以在React中使用的;</li></ol></li></ul>',16)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export default p;export{t as __pageData};

import{o as n,c as s,b as t}from"./app.157864df.js";const a='{"title":"页面刷新后vuex的state数据丢失怎么解决？","description":"","frontmatter":{},"headers":[{"level":2,"title":"页面刷新后vuex的state数据丢失怎么解决？","slug":"页面刷新后vuex的state数据丢失怎么解决？"},{"level":3,"title":"分析","slug":"分析"},{"level":3,"title":"体验","slug":"体验"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"回答范例","slug":"回答范例"},{"level":3,"title":"知其所以然","slug":"知其所以然"}],"relativePath":"frame/vue/49-页面刷新后vuex的state数据丢失怎么解决.md","lastUpdated":1662433250873}',e={},p=[t('<h2 id="页面刷新后vuex的state数据丢失怎么解决？">页面刷新后vuex的state数据丢失怎么解决？</h2><h3 id="分析">分析</h3><p>这是一道应用题目，很容易想到使用<code>localStorage</code>或数据库存储并还原状态。</p><p>但是如何优雅编写代码还是能体现认知水平。</p><hr><h3 id="体验">体验</h3><p>可以从<code>localStorage</code>中获取作为状态初始值：</p><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      count<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>业务代码中，提交修改状态同时保存最新值：虽说实现了，但是每次还要手动刷新localStorage不太优雅</p><div class="language-js"><pre><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>\nlocalStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n</code></pre></div><hr><h3 id="思路">思路</h3><ul><li>问题描述</li><li>解决方法</li><li>谈个人理解</li><li>三方库原理探讨</li></ul><hr><h3 id="回答范例">回答范例</h3><ul><li>vuex只是在内存保存状态，刷新之后就会丢失，如果要持久化就要存起来。</li><li>localStorage就很合适，提交mutation的时候同时存入localStorage，store中把值取出作为state的初始值即可。</li><li>这里有两个问题，不是所有状态都需要持久化；如果需要保存的状态很多，编写的代码就不够优雅，每个提交的地方都要单独做保存处理。这里就可以利用vuex提供的subscribe方法做一个统一的处理。甚至可以封装一个vuex插件以便复用。</li><li>类似的插件有vuex-persist、vuex-persistedstate，内部的实现就是通过订阅mutation变化做统一处理，通过插件的选项控制哪些需要持久化</li></ul><hr><h3 id="知其所以然">知其所以然</h3><p>可以看一下vuex-persist内部确实是利用subscribe实现的</p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fchampionswimmer%2Fvuex-persist%2Fblob%2Fmaster%2Fsrc%2Findex.ts%23L277" target="_blank" rel="noopener noreferrer">github.com/championswi…</a></p>',20)];e.render=function(t,a,e,o,l,c){return n(),s("div",null,p)};export default e;export{a as __pageData};

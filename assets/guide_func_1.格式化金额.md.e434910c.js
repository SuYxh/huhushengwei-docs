import{o as n,c as s,b as a}from"./app.157864df.js";const t='{"title":"格式化金额","description":"","frontmatter":{},"headers":[{"level":3,"title":"使用正则表达式","slug":"使用正则表达式"},{"level":3,"title":"非正则","slug":"非正则"}],"relativePath":"guide/func/1.格式化金额.md","lastUpdated":1662433250873}',p={},o=[a('<h1 id="格式化金额">格式化金额</h1><h3 id="使用正则表达式">使用正则表达式</h3><div class="language-js"><pre><code><span class="token comment">/**\n * @description 格式化金额\n * @param {String | Number} amount - 金额\n * @param {Number} decimalDigits - 保留的小数位数\n * @return {String}\n */</span>\n<span class="token keyword">function</span> <span class="token function">formatAmount</span><span class="token punctuation">(</span><span class="token parameter">amount<span class="token punctuation">,</span> decimalDigits <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> amountStr <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>decimalDigits<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(?:\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n  <span class="token comment">// 是否是小数</span>\n  <span class="token keyword">const</span> isDecimal <span class="token operator">=</span> amountStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isDecimal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 整数部分</span>\n    <span class="token keyword">const</span> integerPart <span class="token operator">=</span> amountStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> amountStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// 小数部分</span>\n    <span class="token keyword">const</span> decimalPart <span class="token operator">=</span> amountStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>\n      amountStr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n      amountStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>integerPart<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>decimalPart<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> amountStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="非正则">非正则</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">formatCash</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">?</span> next <span class="token operator">:</span> next <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> prev\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatCash</span><span class="token punctuation">(</span><span class="token string">&#39;1234567890&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1,234,567,890</span>\n</code></pre></div>',5)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export default p;export{t as __pageData};

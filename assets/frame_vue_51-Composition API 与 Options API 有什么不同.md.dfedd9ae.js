import{o,c as i,b as e}from"./app.157864df.js";const t='{"title":"Composition API 与 Options API 有什么不同","description":"","frontmatter":{},"headers":[{"level":2,"title":"Composition API 与 Options API 有什么不同","slug":"composition-api-与-options-api-有什么不同"},{"level":3,"title":"分析","slug":"分析"},{"level":3,"title":"体验","slug":"体验"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"回答范例","slug":"回答范例"},{"level":3,"title":"可能的追问","slug":"可能的追问"}],"relativePath":"frame/vue/51-Composition API 与 Options API 有什么不同.md","lastUpdated":1662433250873}',p={},s=[e('<h2 id="composition-api-与-options-api-有什么不同">Composition API 与 Options API 有什么不同</h2><h3 id="分析">分析</h3><p>Vue3最重要更新之一就是Composition API，它具有一些列优点，其中不少是针对Options API暴露的一些问题量身打造。是Vue3推荐的写法，因此掌握好Composition API应用对掌握好Vue3至关重要。</p><p><img src="https://qn.huat.xyz/mac/20220829004525.awebp" alt="image-20220629182639250"></p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fextras%2Fcomposition-api-faq.html" target="_blank" rel="noopener noreferrer">vuejs.org/guide/extra…</a></p><hr><h3 id="体验">体验</h3><p>Composition API能更好的组织代码</p><p><img src="https://qn.huat.xyz/mac/20220829004537.png" alt="image-20220629182815578"><img src="https://qn.huat.xyz/mac/20220829004541.awebp" alt="image-20220629183203082"></p><p>例如上面代码，可以提取为useCount()，用于组合、复用</p><p><img src="https://qn.huat.xyz/mac/20220829004546.awebp" alt="image-20220629184919471"><img src="https://qn.huat.xyz/mac/20220829004551.awebp" alt="image-20220629184919471"></p><hr><h3 id="思路">思路</h3><ul><li>总述不同点</li><li>composition api动机</li><li>两者选择</li></ul><hr><h3 id="回答范例">回答范例</h3><ul><li><code>Composition API</code>是一组API，包括：Reactivity API、生命周期钩子、依赖注入，使用户可以通过导入函数方式编写vue组件。而<code>Options API</code>则通过声明组件选项的对象形式编写组件。</li><li><code>Composition API</code>最主要作用是能够简洁、高效复用逻辑。解决了过去<code>Options API</code>中<code>mixins</code>的各种缺点；另外<code>Composition API</code>具有更加敏捷的代码组织能力，很多用户喜欢<code>Options API</code>，认为所有东西都有固定位置的选项放置代码，但是单个组件增长过大之后这反而成为限制，一个逻辑关注点分散在组件各处，形成代码碎片，维护时需要反复横跳，<code>Composition API</code>则可以将它们有效组织在一起。最后<code>Composition API</code>拥有更好的类型推断，对ts支持更友好，<code>Options API</code>在设计之初并未考虑类型推断因素，虽然官方为此做了很多复杂的类型体操，确保用户可以在使用<code>Options API</code>时获得类型推断，然而还是没办法用在mixins和provide/inject上。</li><li>Vue3首推<code>Composition API</code>，但是这会让我们在代码组织上多花点心思，因此在选择上，如果我们项目属于中低复杂度的场景，<code>Options API</code>仍是一个好选择。对于那些大型，高扩展，强维护的项目上，<code>Composition API</code>会获得更大收益。</li></ul><hr><h3 id="可能的追问">可能的追问</h3><ul><li><code>Composition API</code>能否和<code>Options API</code>一起使用？</li></ul>',20)];p.render=function(e,t,p,l,n,c){return o(),i("div",null,s)};export default p;export{t as __pageData};
